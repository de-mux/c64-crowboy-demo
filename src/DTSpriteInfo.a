;Guide to Sprites:
;Sprite #	Description		Next Sprite In Sequence
;83		Ping Stand		83
;84
;85		Ping begin run		87
;86
;87-101		Ping run		Loop
;88-102


; This array describes the next sprite in sequence for a given sprite, starting
;	at sprite 83($53 HEX).
; The bytes that are paired mean the object is flippable. Facing right comes
;	first, facing left comes second. Only the first bytes of these pairs
;	are looked up by the program. The second byte in this array is never
;	looked up by the program, but is a placeholder so sprites may be looked
;	up more quickly. When the program updates the VIC's sprite data
;	pointers, it checks which way the sprites are "facing", and adds 1 to
;	the pointer if the sprite is facing left.
;	(if the 2nd bytes were filled in, they'd all equal the
;		1st byte's value + 1)
SpriteSequence = . - 83 ; (so SpriteSequence can be indexed starting at 83)
	; Ping standing -> Ping standing
	DC.B $53, 0
	; Ping begin run -> Ping run
	DC.B $57, 0
	; Ping running loop
	DC.B $59, 0
	DC.B $5B, 0
	DC.B $5D, 0
	DC.B $5F, 0
	DC.B $61, 0
	DC.B $63, 0
	DC.B $65, 0
	DC.B $57, 0
	

	if 0	
; Each byte of this array holds info for each sprite data block.
;	Bits 0-3: X Offset (0 = use object accel/vel)
;	Bits 4-7: # of frames to hold
; (See note about flippable objects above for more info)
SpriteInfo = . - 83
	; Ping standing
	DC.B 1*16 + 0, 1*16 + 0		; use object accel, hold 1 frame
	; Ping begin run
	DC.B 1*16 + 0, 1*16 + 0
	; Ping running loop
	DC.B 1*16 + 4, 1*16 + 4
	DC.B 1*16 + 6, 1*16 + 6
	;DC.B 1*16 + ?, 0
	;DC.B 1*16 + ?, 0
	DC.B 1*16 + 6, 1*16 + 6		; airborn
	DC.B 1*16 + 6, 1*16 + 6		; airborn
	DC.B 1*16 + 4, 1*16 + 4
	DC.B 1*16 + 6, 1*16 + 6
	;DC.B 1*16 + ?, 0
	;DC.B 1*16 + ?, 0
	DC.B 1*16 + 6, 1*16 + 6		; airborn
	DC.B 1*16 + 6, 1*16 + 6		; airborn
	endif


; Each byte of this array holds X Offset for sprite data block
; (See note about flippable objects above for more info)
SpriteOffset = . - 83
	; Ping standing
	DC.B 0,0		; use object accel, hold 1 frame
	; Ping begin run
	DC.B 0,0
	; Ping running loop
	DC.B 4,-4
	DC.B 6,-6
	;DC.B 1*16 + ?, 0
	;DC.B 1*16 + ?, 0
	DC.B 6,-6			; airborn
	DC.B 6,-6			; airborn
	DC.B 4,-4
	DC.B 6,-6
	;DC.B 1*16 + ?, 0
	;DC.B 1*16 + ?, 0
	DC.B 6,-6			; airborn
	DC.B 6,-6			; airborn
	
	