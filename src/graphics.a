; "Crow Boy"
;(c) 2002 by Eric Odland
;
; File : graphics.a
;
; Contains : Graphics drivers, subroutines, data structures
;
;

; ******************* DATA *******************
;
; dimensions of the game's viewport(in chars)
_VIEWPORT_WIDTH = SCREEN_WIDTH
_VIEWPORT_HEIGHT = LEVEL_PACKED_HEIGHT * LEVEL_BLOCK_SIZE

; screen fade modes
FADE_MODE_NONE = 0  ; not fading
FADE_MODE_IN = 1    ; fading in
FADE_MODE_OUT = 2   ; fading out

FADE_FRAMES = 8         ; number of frames when fading in or out

; constants
kSetBit:                ; used to set a bit to 0-7
        DC.B $1, $2, $4, $8, $10, $20, $40, $80
kResetBit:              ; used to reset a bit to 0-7
        DC.B $FE, $FD, $FB, $F7, $EF, $DF, $BF, $7F

        ; for Int_WorldScreenUpdate
S_spriteDataPtr:        ;sprite data pointer for right-facing sprite
        DS.B 8          ;  add 1 to get left-facing version
S_XYPos DS.W 8
S_XMSB  DS.B 1
S_enable DS.B 1


; ******************* CODE *******************
;
; ******************* InitGameGraphics *******************
;
; Purpose:              Get graphics ready to play game
;
; Registers used:       .A, .X
;
; How to use:
;       Call this routine before the game starts
;
InitGameGraphics        subroutine
        jsr ClearBothScreens
        lda #%00010000  ; Multi-Color, 38 column display
        sta VIC2
        lda #%11111111  ; Sprites multi-color
        sta SPRMC
        lda #10
        sta SPR_MC0
        lda #6
        sta SPR_MC1
        rts


; ******************* DrawLevelToOffscreen *******************
;
; Purpose:              Draw 40x18 view of the current level to offscreen area
;                        as well as 40x18 offscreen color area
;
; Registers used:       .A, .X, .Y
;
; Memory Used:          rough_scroll, offscreen_color_mem
;
; How to use:
;       Setup rough_scroll.
;       Make sure screen_page is correct.
;       Make sure a level is loaded.
;       Call this routine.
;
DrawLevelToOffscreen    subroutine
        ; 21 ms(20727 cycles)
        ;setup self-modifying code

        lda rough_scroll        ; setup topLeft of level memory to copy
        sta .level_data+1
        lda #>CurLevel          ; decompressed level data block
        sta .level_data+2

        ldx offscreen_char_msb
        stx .screen_dst+2
        lda #0
        sta .screen_dst+1

        ldx #<Colors1           ; if using colorset 1, use Colors1
        ldy #>Colors1           ;       else, use Colors2
        lda level_header_flags
        lsr
        bcc .3
        ldx #<Colors2
        ldy #>Colors2
.3      stx .color_data+1
        sty .color_data+2

        lda #<offscreen_color_mem    ; get ready to draw to offscreen color area
        ldy #>offscreen_color_mem    ;  (offscreen_color_mem must be a multiple of $100, or
        sta .color_dst+1           ;       routine won't work right.)
        sty .color_dst+2

        ; copy level/colors to offscreen
.nxtRow ldy #_VIEWPORT_WIDTH-1     ; 2 cycle
        ;inc BORDER_COLOR
.level_data:
        lda $FFFF,y             ; 4   - self-modifying base addr
.screen_dst:
        sta $FFFF,y             ; 4-5 - self-modifying base addr
        tax                     ; 2
.color_data:
        lda $FFFF,x             ; 4   - self-modifying base addr
.color_dst:
        sta $FFFF,y             ; 4-5 - self-modifying base addr

        dey                     ; do a row
        bpl .level_data

        inc .level_data+2           ; add 256 to get next row of level
        lda .screen_dst+1           ; add 40 to get next row of screen, color
        clc
        adc #_VIEWPORT_WIDTH
        bcc .1
        inc .screen_dst+2
        inc .color_dst+2
.1      sta .screen_dst+1
        sta .color_dst+1

        lda .level_data+2
        cmp #(>CurLevel + _VIEWPORT_HEIGHT)
        bne .nxtRow

        IF 0
        ;; TEST CODE ;;
        lda fine_scroll
        sec
        sbc #4
        bne .tst
        inc rough_scroll
.tst:   and #%00000111
        sta fine_scroll
        ENDIF

        rts


; ******************* RequestWorldScreenUpdate *******************
; Setup next interrupt for a screen update.
;
; Prerequisites:        interrupts must be disabled
;
RequestWorldScreenUpdate  subroutine
        lda #IRQ_SCREEN_UPDATE_COMPARE
        sta RASTER_COMPARE
        set_interrupt Int_WorldScreenUpdate
        rts


; ******************* Int_WorldScreenUpdate *******************
;
; Purpose:              update the screen
;                         copy offscreen color to color memory
;                         flip screen memory page
;
; Registers used:       .A, .X, .Y
;
; Memory Used:          temp_w, temp_w+1, temp_w2
;
; How to use:
;       Set IRQ vector to point here
;       Load .A with the first character.
;       Load .X with the width in chars.
;       Load .Y with the height.
;
Int_WorldScreenUpdate    subroutine
        ; 7.3ms(7285 cycles)
        ldx #_SCREEN_COPY_WORLDVIEW
        jsr CopyOffscreenColorToColorMem

        ;   scroll screen to fine X dot position
        ; scanline moving into play area view, set scroll
        lda VIC2        ; vic control register
        and #%11111000  ; clear low 3 bits
        ora fine_scroll ; set low 3 bits to scroll value
        sta VIC2

        ; perform page-flip
        jsr PageFlip

        ; copy sprite pointers to screen memory
        ldx #>SCREEN_1_SPR_PTRS ; if page=1, use screen 1
        lda screen_page
        bne .usp1
        ldx #>SCREEN_2_SPR_PTRS ; if page=0, use screen 2
.usp1   stx .spr+2
        ldx #<SPR_PTR_OFFSET
        stx .spr+1
        ldx #7                  ; copy
.usp2   lda obj_info,x            ; carry = facing bit
        lsr
        lsr
        lda S_spriteDataPtr,x
        adc #0                  ; add carry to .A (facing bit)
.spr    sta $FFFF,x             ; self-modifying address
        dex
        bpl .usp2

        ; position sprites
        ldx #16                 ; the 16th index is the sprite X MSBs
.ps1    lda S_XYPos,x
        sta SPR0X,x
        dex
        bpl .ps1

        ; enable/disable sprites
        lda S_enable
        sta SPRDISP

        ; set interrupt back to Int_ModeJump
        lda #IRQ_MODE_JUMP_COMPARE
        sta RASTER_COMPARE
        set_interrupt Int_ModeJump

        jmp ModeExit


; ******************* CopyOffscreenColorToColorMem *******************
;
; Purpose:              Copy color data from offscreen buffer to VIC-II
;                         color memory
;
; Registers used:       .A, .X, .Y
;
; How to use:
;       Make sure offscreen color buffer is set up correctly
;       Load .X with _SCREEN_COPY_WORLDVIEW to copy just the world view,
;                       or _SCREEN_COPY_FULLSCREEN to copy the whole screen
;
; 10035 cycles
_SCREEN_COPY_WORLDVIEW = 0
_SCREEN_COPY_FULLSCREEN = 1
CopyOffscreenColorToColorMem    subroutine
        ; Copy offscreen color info to onscreen color memory(world viewport only)
        ; unrolled loop(6713 cycles)
        ldy #(SCREEN_WIDTH-1)           ; for 40 screen columns
.1:
screen_row  SET 0
        REPEAT _VIEWPORT_HEIGHT
        lda offscreen_color_mem + SCREEN_WIDTH * screen_row,y            ; 4
        sta COLORMEM + SCREEN_WIDTH * screen_row,y                  ; 4-5
screen_row  SET screen_row + 1
        REPEND
        dey
        bpl .1

        ; if we're only copying the world viewport, we're done, otherwise
        ;  complete the rest of the screen rows
        cpx #_SCREEN_COPY_WORLDVIEW
        beq .rts

        ; copy sprite/bg color
        ldx #[VIC_II_COLOR_REGISTERS_END - VIC_II_COLOR_REGISTERS]
.3      lda offscreen_vic_ii_color_registers,x
        sta VIC_II_COLOR_REGISTERS,x
        dex
        bpl .3

        ; copy the rest of offscreen color info to onscreen color memory
        ldy #(_VIEWPORT_WIDTH-1)           ; for 40 screen columns
screen_row  SET _VIEWPORT_HEIGHT
.2:
        REPEAT (SCREEN_HEIGHT - _VIEWPORT_HEIGHT)
        lda offscreen_color_mem + SCREEN_WIDTH * screen_row,y            ; 4
        sta COLORMEM + SCREEN_WIDTH * screen_row,y                  ; 4-5
screen_row  SET screen_row + 1
        REPEND
        dey
        bpl .2
.rts    rts

