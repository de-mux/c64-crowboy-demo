;Commodore 64 Logo by Eric Odland
;This displays an animated Commodore 64 logo

; FIXME: base these on values in boot.a
LOGO_VIC_BANK = $4000
LOGO_SPRITE_MEM_START = LOGO_VIC_BANK + $1000
LOGO_CHARSET_MEM_START = LOGO_VIC_BANK + $3800
LOGO_CHARSET_MEM_DEST = LOGO_CHARSET_MEM_START + $200  ; char 64

LOGO_SCREEN_BANK_START = $C00
LOGO_SCREEN_DRAW_X = 16
LOGO_SCREEN_DRAW_Y = 8
LOGO_SCREEN_DRAW_ORIGIN = LOGO_VIC_BANK + LOGO_SCREEN_BANK_START + (40*LOGO_SCREEN_DRAW_Y + LOGO_SCREEN_DRAW_X)  ; row 8, col 16

LOGO_SPR_POINTERS = LOGO_VIC_BANK + LOGO_SCREEN_BANK_START + SPR_PTR_OFFSET
        ;ECHO LOGO_SPR_POINTERS

C64LOGO subroutine
        ;copy sprite data to bank 64-
        LDA #<.SPR
        LDY #>.SPR
        STA temp_w
        STY temp_w+1
        LDA #<LOGO_SPRITE_MEM_START
        LDY #>LOGO_SPRITE_MEM_START
        STA temp_w2
        STY temp_w2+1
        LDY #0
.LOOP1  LDA (temp_w),Y          ;get byte
        CMP #$F2                ;exit if done
        BEQ .ROUT0
        CMP #$F1                ;if row of zeroes, expand
        BNE .NZ
        INC temp_w
        BNE .L1
        INC temp_w+1
.L1     LDA (temp_w),Y          ;expand zeroes
        TAX
        LDA #0
.LOOP2  STA (temp_w2),Y
        DEX
        BEQ .L2
        INC temp_w2
        BNE .LOOP2
        INC temp_w2+1
        JMP .LOOP2
.NZ     STA (temp_w2),Y         ;not a row of zeroes, copy normally
.L2     INC temp_w2
        BNE .EX
        INC temp_w2+1
.EX     INC temp_w
        BNE .LOOP1
        INC temp_w+1
        JMP .LOOP1

        ;COPY C64 LOGO CHAR DATA, turn it upside down
.ROUT0  LDX #$90        ;copy logo char data
.C2     DEX
        BEQ .ROUT0B
        LDA .LOGO-1,X
        ;STA $39FF,X    ;char 64
        STA LOGO_CHARSET_MEM_DEST-1,X
        JMP .C2
.ROUT0B LDA #$90
        ;LDY #$3A
        LDY #>LOGO_CHARSET_MEM_DEST
        STA temp_w
        STY temp_w+1
        LDX #0          ;turn it upside down for chars 82-99?
        LDY #7
;.C3    LDA $3A00,X
.C3     LDA LOGO_CHARSET_MEM_DEST,X
        STA (temp_w),Y
        INX
        CPX #$8F
        BEQ .SCN
        DEY
        BPL .C3
        LDY #7
        LDA temp_w
        CLC
        ADC #8
        BCC .C4
        INC temp_w+1
.C4     STA temp_w
        JMP .C3

.SCN    LDX #$20        ;pause
        JSR Wait

        ;DRAW THE COMMODORE LOGO
        LDA #<LOGO_SCREEN_DRAW_ORIGIN
        LDY #>LOGO_SCREEN_DRAW_ORIGIN
        STA temp_w
        STY temp_w+1
        LDY #$D9        ;color memory
        STA temp_w2
        STY temp_w2+1
        LDX #0
        LDY #0
.LOOP3  LDA .LOGOMP,X   ;store
        BEQ .ROUT1
        STA (temp_w),Y
        LDA #6
        STA (temp_w2),Y
        INX
        INY
        CPY #8
        BNE .LOOP3
        LDY #0
        CLC             ;next screen row
        LDA temp_w
        ADC #$28
        BCC .C1
        INC temp_w+1
.C1     STA temp_w
        CLC
        LDA temp_w2
        ADC #$28
        BCC .C0
        INC temp_w2+1
.C0     STA temp_w2
        JMP .LOOP3
.ROUT1  LDA #9  ;set part of logo to brown
        JSR .RED
        LDX #5
        JSR Wait
        LDA #2  ;set part of logo to red
        JSR .RED
        LDX #$0E        ;set sprite positions
.L3     DEX
        BMI .ROUT2
        LDA .SPRXY,X
        STA SPR0X,X
        JMP .L3
.ROUT2  LDX #$07        ;set sprite pointers
.L4     DEX
        BMI .ROUT3
        LDA .SPRP,X
        STA LOGO_SPR_POINTERS,X
        JMP .L4
.ROUT3  LDX #$07        ;set sprite colors
.L5     DEX
        BMI .ROUT4
        LDA .SPRC,X
        STA SPR0C,X
        JMP .L5

.ROUT4  LDX #$45        ;pause
        JSR Wait

        ; ANIMATE LENS FLARE
        LDA #%00001101  ;turn some sprites on
        STA SPRDISP
        LDY #4
.ANIM   tya
        pha
        LDX #5
        JSR Wait
        pla
        tay
        LDX #5
.L6A    DEX
        BMI .L6
        INC LOGO_SPR_POINTERS,X
        JMP .L6A
.L6     CPY #3
        BNE .L7
        LDA #%01111111  ;turn on rest of sprites
        STA SPRDISP
.L7     CLC
        LDA SPR5X       ;move sprites 5 and 6
        ADC #8
        STA SPR5X
        LDA SPR5Y
        ADC #8
        STA SPR5Y
        LDA SPR6X
        ADC #6
        STA SPR6X
        LDA SPR6Y
        ADC #6
        STA SPR6Y
        DEY
        BNE .ANIM
        LDX #$60        ;pause
        JSR Wait

        ; FADE OUT
        LDA #9
        JSR .RED
        LDY #2
        LDX #0
        STX temp_w2
.F0     STX temp_w
.F1     LDX temp_w
        LDA .FDAT,X
        INC temp_w
        INC temp_w
        LDX temp_w2
        STA SPR0C,X
        INC temp_w2
        LDA temp_w2
        CMP #8
        BNE .F1
        tya     ; remember Y
        pha
        LDX #5
        JSR Wait
        pla
        tay
        DEY
        BEQ .RET
        CPY #1
        BNE .F2
        tya
        pha
        jsr ClearCurrentScreen
        pla
        tay
.F2     LDX #0
        STX temp_w2
        LDX #1
        JMP .F0
.RET    LDA #0
        STA SPRDISP
        LDX #$70        ;pause
        JSR Wait
        RTS

.FDAT   .BYTE $06, $00  ;data for color fade
        .BYTE $0E, $06
        .BYTE $06, $00
        .BYTE $02, $09
        .BYTE $06, $00
        .BYTE $09, $00
        .BYTE $00, $00

.RED    LDX #3          ;used for fading out the logo
.CR0    STA COLORMEM+$1F4,X
        DEX
        BNE .CR1
        LDX #43
.CR1    CPX #40
        BEQ .CR2
        JMP .CR0
.CR2    RTS

.SPRXY  .BYTE 158, 121, 158, 121, 192, 135, 192, 147, 169, 156, 155
        .BYTE 119, 157, 121
;.SPRP  .BYTE 192, 195, 200, 200, 204, 209, 210
.SPRP   .BYTE 64, 67, 72, 72, 76, 81, 82
.SPRC   .BYTE $0E, $01, $0E, $0A, $0E, $08, $09
.SPR    .BYTE $F1, $0F, $02, $F1, $3C, $02, $00, $00, $03
        .BYTE $80, $00, $07, $00, $00, $01, $F1, $29, $FF
        .BYTE $F1, $03, $04, $00, $00, $04, $00, $00, $04
        .BYTE $00, $00, $07, $E0, $00, $05, $80, $00, $3F
        .BYTE $00, $00, $05, $00, $00, $01, $00, $00, $01
        .BYTE $F1, $24, $10, $00, $00, $18, $10, $00, $0A
        .BYTE $30, $00, $03, $40, $00, $08, $40, $00, $08
        .BYTE $80, $00, $00, $80, $00, $36, $00, $00, $61
        .BYTE $80, $00, $00, $40, $00, $00, $40, $00, $00
        .BYTE $20, $F1, $1C, $FF, $80, $00, $00, $40, $20
        .BYTE $00, $28, $60, $00, $0D, $00, $00, $10, $80
        .BYTE $00, $10, $80, $00, $10, $80, $00, $10, $80
        .BYTE $00, $0D, $00, $00, $71, $40, $00, $40, $F1
        .BYTE $03, $10, $00, $00, $08, $00, $00, $04, $F1
        .BYTE $15, $08, $F1, $10, $02, $F1, $2F, $FF, $F1
        .BYTE $09, $04, $80, $00, $07, $80, $00, $07, $00
        .BYTE $00, $0F, $00, $00, $01, $80, $F1, $32, $12
        .BYTE $80, $00, $0F, $00, $00, $0F, $00, $00, $0F
        .BYTE $00, $00, $0F, $00, $00, $12, $80, $F1, $05
        .BYTE $20, $F1, $1F, $FF, $80, $F1, $3F, $E0, $F1
        .BYTE $3E, $FF, $FE, $00, $00, $E0, $F1, $3C, $FF
        .BYTE $E0, $00, $FC, $00, $00, $E0, $00, $00, $80
        .BYTE $F1, $35, $FF, $FF, $F0, $00, $FE, $00, $00
        .BYTE $F0, $00, $00, $C0, $00, $00, $80, $00, $00
        .BYTE $80, $F1, $30, $40, $F1, $05, $10, $00, $00
        .BYTE $0C, $00, $00, $03, $80, $F1, $31, $FF, $C0
        .BYTE $00, $00, $40, $00, $00, $30, $00, $00, $1C
        .BYTE $00, $10, $07, $80, $E0, $00, $FF, $80, $F1
        .BYTE $2E, $C0, $00, $00, $40, $00, $00, $30, $00, $06
        .BYTE $1C, $00, $1E, $0F, $80, $F8, $03, $FF, $C0
        .BYTE $00, $7F, $F1, $2B, $FF, $C0, $00, $00, $40
        .BYTE $00, $00, $70, $00, $06, $3C, $00, $1E, $1F
        .BYTE $80, $FC, $0F, $FF, $F8, $03, $FF, $E0, $00
        .BYTE $7F, $F1, $29, $60, $00, $00, $F0, $00, $00
        .BYTE $60, $F1, $38, $FF, $1E, $00, $00, $3F, $00
        .BYTE $00, $7F, $80, $00, $FF, $C0, $00, $7F, $80
        .BYTE $00, $3F, $00, $00, $1E, $F1, $2D, $F2
;$F1 means a row of zeroes, $F2 means end of data

.LOGO   .BYTE $00, $00, $00, $00, $00, $00, $01, $07
        .BYTE $00, $00, $00, $00, $0F, $7F, $FF, $FF
        .BYTE $00, $00, $00, $FF, $FF, $FF, $FF, $FF
        .BYTE $00, $00, $00, $C0, $FC, $FF, $FF, $FF
        .BYTE $00, $00, $00, $00, $00, $01, $03, $07
        .BYTE $0F, $1F, $3F, $FF, $FF, $FF, $FF, $FF
        .BYTE $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
        .BYTE $0F, $0F, $1F, $1F, $3F, $3F, $3F, $7F
        .BYTE $FF, $FF, $FE, $F8, $E0, $E0, $80, $80
        .BYTE $FF, $C0, $00, $00, $00, $00, $00, $00
        .BYTE $FF, $7F, $0F, $03, $00, $00, $00, $00
        .BYTE $00, $00, $00, $00, $00, $FF, $FF, $FF
        .BYTE $00, $00, $00, $00, $00, $F8, $F0, $E0
        .BYTE $7F, $7F, $7F, $FF, $FF, $FF, $FF, $FF
        .BYTE $FF, $FF, $FE, $FE, $FC, $FC, $FC, $FC
        .BYTE $FF, $FF, $FF, $FF, $FF, $FF, $FF, $00
        .BYTE $FF, $FF, $FF, $FE, $FC, $F8, $F0, $00
        .BYTE $C0, $80, $00, $00, $00, $00, $00, $00
.LOGOMP .BYTE $20, $40, $41, $42, $43, $20, $20, $20
        .BYTE $44, $45, $46, $46, $46, $20, $20, $20
        .BYTE $47, $46, $48, $49, $4A, $4B, $4B, $4C
        .BYTE $4D, $4E, $20, $20, $20, $4F, $50, $51
        .BYTE $5F, $60, $20, $20, $20, $61, $62, $63
        .BYTE $59, $46, $5A, $5B, $5C, $5D, $5D, $5E
        .BYTE $56, $57, $46, $46, $46, $20, $20, $20
        .BYTE $20, $52, $53, $54, $55, $20, $20, $20
        .BYTE $00

;       INCLUDE "system.asm"
