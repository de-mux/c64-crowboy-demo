; "Crow Boy"
;(c) 2002 by Eric Odland
;
; File : objects.a
;
; Contains : Routines for creating and maintaining objects
;


; ******************* DATA *******************
;
kSpriteGroundLevel = 164        ; y position of sprites on ground level
kRunSpeed = 5                   ; the speed at which characters run

;player states
ACT_RUN = 0
ACT_JUMP = 1
ACT_LAND = 2
ACT_STAND = 3
ACT_ATTACK = 4
ACT_DIE = 5
ACT_BEING_HIT = 6

OBJ_INFO_BIT_ACTIVE =    %00000001
OBJ_INFO_BIT_FACING =    %00000010
OBJ_INFO_BIT_NEWACTION = %00000100

;facings
OBJ_INFO_FACING_RT =  %00000000
OBJ_INFO_FACING_LFT = %00000010

; Runtime state information about up to 8 game objects(characters, etc)
object_record:          ; object records 0-7
; info: Bit 0: active or inactive
;       Bit 1: facing(0=right)
;       Bit 2: newAction (whether a new action started)
;          other bits depend on what type of object
obj_info:
        DS.B 8
obj_type:
        DS.B 8
obj_current_action:
        DS.B 8
;obj_accel:
;       DS.B 8
obj_vel_x:
        DS.B 8
obj_vel_y:
        DS.B 8

; actionArray: pointer to the array of sprite data indices for various actions
obj_action_array_lo:
        DS.B 8
obj_action_array_hi:
        DS.B 8

; extra info specific to the type of object
obj_extra_info:
        DS.B 8



; ******* Object Definitions ********
; Define the list of sprite indices for each state.
; See player states, above for the enumated states.
ObjectPlayer:
        ;     R    J   L   S   A   D   H
        DC.B 85, 103, 83, 83, 83, 83, 83


; ******************* CODE *******************
;
; ******************* SetupPlayer *******************
;
; Purpose:              Setup player in sprite 0
;
; Registers used:
;
; How to use:
;       Call this routine when a level begins
;
SetupPlayer     subroutine
        jsr GenerateObject
        DC.B 0                  ; info
        DC.B 0                  ; type (0=player)
;       DC.B 3                  ; 3 = standing
        DC.B 0                  ; 0 = running
        DC.B 0                  ; velX = 0
        DC.B 0                  ; velY = 0
        DC.W ObjectPlayer       ; points to action array
        DC.B 0                  ; no extra info
        DC.B 0                  ; color
        DC.B kSpriteGroundLevel ; YPos = 164
        DC.W 160                ; XPos = 160
        DC.B 0                  ; Sprite 0

        ;ldx #0
        ;lda #ACT_RUN
        ;ldy #OBJ_INFO_FACING_RT
        ;jsr RequestAction

        ; get current action
        ldx #0
        lda obj_action_array_lo,x
        ldy obj_action_array_hi,x
        sta temp_w
        sty temp_w+1
        lda obj_current_action,x
        tay
        lda (temp_w),y          ; check sprite's image
        ldy #0                  ; set sprite data ptr accordingly
        sta S_spriteDataPtr,y
        rts


; ******************* GenerateObject *******************
;
; Purpose:              Creates an object with specified characteristics
;
; Registers used:
;
; How to use:
;       Make sure required data follows your JSR instruction in this order:
;               info, type, currentAction, acceleration, velocity,
;               actionArray, extraInfo, color, YPos, XPos, XMSB,
;               objectIndex(0-7)
;       Call this routine when a level begins
;
; FIXME: create enumerated constants for all the indicies into an object record
GenerateObject  subroutine
        pla                     ; get return address(points to data following
        sta temp_w                ;   the JSR)
        pla
        sta temp_w+1
        inc temp_w                ; add 1 to pointer
        bne .add
        inc temp_w+1
.add:

        ldy #12                 ; what is object's index?(0-7)
        lda (temp_w),y
        tax                     ; store in x for later

        ; copy data into object record
        ;   (used by WorldUpdate)
        ldy #0
        lda (temp_w),y
        ora #OBJ_INFO_BIT_ACTIVE ; set bit 0 to 1.(active object)
        sta obj_info,x
        iny
        lda (temp_w),y
        sta obj_type,x
        iny
        lda (temp_w),y
        sta obj_current_action,x
        iny
        lda (temp_w),y
        sta obj_vel_x,x
        iny
        lda (temp_w),y
        sta obj_vel_y,x
        iny
        lda (temp_w),y
        sta obj_action_array_lo,x
        iny
        lda (temp_w),y
        sta obj_action_array_hi,x
        iny
        lda (temp_w),y
        sta obj_extra_info,x


        ; set sprite color
        ldy #8
        lda (temp_w),y
        sta SPR0C,x

        ; copy data into sprite record
        ;   (setup by WorldUpdate, copied to
        ;    VIC memory by Int_WorldScreenUpdate)
        lda kResetBit,x         ; initially reset X MSB
        and S_XMSB
        sta S_XMSB
        ldy #11                 ; get X MSB
        lda (temp_w),y
        lsr
        bcc .out1
        lda kSetBit,x           ; set sprite's X MSB bit
        ora S_XMSB
        sta S_XMSB
.out1:
        ; enable the sprite
        lda kSetBit,x
        ora S_enable
        sta S_enable

        ; copy X and Y positions
        txa                     ; X = X * 2
        asl
        tax
        dey                     ; get X pos
        lda (temp_w),y
        sta S_XYPos,x
        dey                     ; get Y pos
        lda (temp_w),y
        inx
        sta S_XYPos,x

        ; set return address to instruction after data
        lda temp_w                ; A = (temp_w)+12
        clc
        adc #12
        tax                     ; X = A
        lda temp_w+1              ; A = (temp_w+1)+C
        adc #0
        pha
        txa
        pha

        rts

; ******************* RequestAction *******************
;
; Purpose:              requests that a character begin a certain action
;                       (for actions, see "Actions," above)
; Registers used:
;
; How to use:
;       Load .X with the object to request (0-7)
;       Load .A with the desired action (run, stand, attack, jump, etc)
;       Load .Y with the desired facing (left or right)
;       Call this routine
;
RequestAction   subroutine
.desired_action = temp_w
.current_action = temp_w2
        sta .desired_action
        lda obj_current_action,x   ; if action already being done, return
        sta .current_action
        cmp .desired_action
        bne .newact             ;
        lda obj_info,x            ; if facing different, update action
        and #OBJ_INFO_BIT_FACING
        sta temp_w3
        cpy temp_w3
        beq .exit
.newact tya
        ldy .desired_action     ; action = run?
        bne .1

        ; Action: run
        tay                     ; .Y = desired facing
        lda .current_action
        cmp #ACT_STAND              ;   if not standing or running,
                                ;       can't run(go exit)
        beq .run1               ;
        cmp #ACT_RUN                ;
        bne .exit               ;
.run1   ;lda obj_info,x
        ;pha                    ; store current info
        ;and #%11111101
        ;and #%00000010         ; check facing
        ;sta temp_w3              ; temp_w3 = current facing
        ;cpy temp_w3
        ;bne .face              ; can't start run again in same direction!

        ;jmp .exit
        ;pha
        ;lda .current_action
        ;cmp #ACT_RUN
        ;beq .exit
        ;pla
.face   ;pla                    ; set current facing to desired facing
        and #%11111101
        sty temp_w3
        ora temp_w3
        sta obj_info,x
        lda #kRunSpeed          ; set velocity
        cpy #OBJ_INFO_FACING_RT       ;  positive if facing right
        beq .rt                 ;
        lda #(-kRunSpeed)       ;  negative if facing left
.rt     sta obj_vel_x,x            ;
        jmp .setAction

.1
        dey                     ; action = jump?
        bne .2

        ; Action: jump
        lda .current_action
        cmp #ACT_ATTACK
        beq .exit
        cmp #ACT_JUMP
        beq .exit
        lda #(-8)               ; set jump velocity
        sta obj_vel_y,x
        jmp .setAction

.2      dey
        dey                     ; action = stand?
        bne .3

        ; Action: stand
        lda #0
        sta obj_vel_x,x
        jmp .setAction

.3      dey                     ; action = attack?
        bne .exit

        ; Action: attack

.setAction:
; called if the action has been granted
        lda obj_info,x            ; newAction = true
        ora #%00000100          ;
        sta obj_info,x
        lda .desired_action
        tay                     ; y = theAction
        sta obj_current_action
        lda obj_action_array_lo,x
        sta .desired_action
        lda obj_action_array_hi,x
        sta .desired_action+1
        lda (.desired_action),y            ; set initial sprite data pointer based on action
        sta S_spriteDataPtr,x


.exit   rts
;       0 - run, 1 - jump, 2 - land, 3 - stand, 4 - attack,
;       5 - die, 6 - beingHit

; ******************* DisableSprite *******************
;
; Purpose:              Disables sprite
;
; Registers used:
;
; How to use:
;       Load .X with the object to disable (0-7)
;       Call this routine
;
DisableSprite   subroutine
        lda kResetBit,x
        and S_enable
        sta S_enable
        rts

