; "Crow Boy"
;(c) 2002 by Eric Odland
;
; File : objects.a
;
; Contains : Routines for creating and maintaining objects.
;               Includes state changes and updates.
;


; ******************* DATA *******************
;
kSpriteGroundLevel = 164        ; y position of sprites on ground level
kRunVelocity = 5                ; the x-velocity at which characters run
kJumpVelocity = 6               ; the initial y-velocity at which characters jump
; prevent sprites from getting to close to either edge
kSpriteMinXPos = 70
kSpriteMaxXPos = 255

;player states
ACT_RUN = 0
ACT_JUMP = 1
ACT_JUMP_KICK = 2
ACT_JUMP_PUNCH = 3
ACT_KICK = 4
ACT_PUNCH = 5
ACT_LAND = 6
ACT_STAND = 7
ACT_DIE = 8
ACT_BEING_HIT = 9

OBJ_INFO_BIT_ACTIVE =    %00000001
OBJ_INFO_BIT_FACING =    %00000010
OBJ_INFO_BIT_NEWACTION = %00000100

;facings
OBJ_INFO_FACING_RT =  %00000000
OBJ_INFO_FACING_LFT = %00000010


; ******* Object Definitions ********
; Define the list of sprite indices for each state.
; See player states, above for the enumated states.
ObjectPlayer:
        ;        run jump jkik jpnch kick pnch land stnd  die  hit
        DC.B      85, 103, 105,  105, 105, 105,  83,  83,  83,  83


; ******************* CODE *******************
;
; ******************* SetupPlayer *******************
;
; Purpose:              Setup player in sprite 0
;
; Registers used:
;
; How to use:
;       Call this routine when a level begins
;
SetupPlayer     subroutine
        jsr GenerateObject
        DC.B 0                  ; info
        DC.B 0                  ; type (0=player)
;       DC.B 3                  ; 3 = standing
        DC.B ACT_JUMP           ; starting action
        DC.B 0                  ; velX = 0
        DC.B 0                  ; velY = 0
        DC.W ObjectPlayer       ; points to action array
        DC.B 0                  ; no extra info
        DC.B 0                  ; color
        DC.B kSpriteGroundLevel-10 ; YPos = 164
        DC.W 160                ; XPos = 160
        DC.B 0                  ; Sprite 0

        ;ldx #0
        ;lda #ACT_RUN
        ;ldy #OBJ_INFO_FACING_RT
        ;jsr RequestAction

        ; get current action
        ldx #0
        lda obj_action_array_lo,x
        ldy obj_action_array_hi,x
        sta temp_w
        sty temp_w+1
        lda obj_current_action,x
        tay
        lda (temp_w),y          ; check sprite's image
        ldy #0                  ; set sprite data ptr accordingly
        sta spr_data_ptrs,y
        rts


; ******************* GenerateObject *******************
;
; Purpose:              Creates an object with specified characteristics
;
; Registers used:
;
; How to use:
;       Make sure required data follows your JSR instruction in this order:
;               info, type, currentAction, acceleration, velocity,
;               actionArray, extraInfo, color, YPos, XPos, XMSB,
;               objectIndex(0-7)
;       Call this routine when a level begins
;
; FIXME: create enumerated constants for all the indicies into an object record
GenerateObject  subroutine
.obj_data_ptr = temp_w
        pla                     ; get return address(points to data following
        sta .obj_data_ptr       ;   the JSR)
        pla
        sta .obj_data_ptr+1
        inc .obj_data_ptr       ; add 1 to pointer
        bne .add
        inc .obj_data_ptr+1
.add:

        ldy #12                 ; what is object's index?(0-7)
        lda (.obj_data_ptr),y
        tax                     ; store in x for later

        ; copy data into object record
        ;   (used by WorldUpdate)
        ldy #0
        lda (.obj_data_ptr),y
        ora #OBJ_INFO_BIT_ACTIVE ; set bit 0 to 1.(active object)
        sta obj_info,x
        iny
        lda (.obj_data_ptr),y
        sta obj_type,x
        iny
        lda (.obj_data_ptr),y
        sta obj_current_action,x
        iny
        lda (.obj_data_ptr),y
        sta obj_vel_x,x
        iny
        lda (.obj_data_ptr),y
        sta obj_vel_y,x
        iny
        lda (.obj_data_ptr),y
        sta obj_action_array_lo,x
        iny
        lda (.obj_data_ptr),y
        sta obj_action_array_hi,x
        iny
        lda (.obj_data_ptr),y
        sta obj_extra_info,x

        ; set sprite color
        ldy #8
        lda (.obj_data_ptr),y
        sta SPR0C,x

        ; copy data into sprite record
        ;   (setup by WorldUpdate, copied to
        ;    VIC memory by Int_WorldScreenUpdate)
        lda kResetBit,x         ; initially reset X MSB
        and spr_x_pos_msb
        sta spr_x_pos_msb
        ldy #11                 ; get X MSB
        lda (.obj_data_ptr),y
        lsr
        bcc .out1
        lda kSetBit,x           ; set sprite's X MSB bit
        ora spr_x_pos_msb
        sta spr_x_pos_msb
.out1:
        ; enable the sprite
        lda kSetBit,x
        ora spr_enable
        sta spr_enable

        ; copy X and Y positions
        txa                     ; X = X * 2
        asl
        tax
        dey                     ; get X pos
        lda (.obj_data_ptr),y
        sta spr_xy_pos,x
        dey                     ; get Y pos
        lda (.obj_data_ptr),y
        inx
        sta spr_xy_pos,x

        ; set return address to instruction after data
        lda .obj_data_ptr       ; A = (.obj_data_ptr)+12
        clc
        adc #12
        tax                     ; X = A
        lda .obj_data_ptr+1     ; A = (.obj_data_ptr+1)+C
        adc #0
        pha
        txa
        pha

        rts

; ******************* RequestAction *******************
;
; Purpose:              requests that a character begin a certain action
;                       (for actions, see "Actions," above)
; Arguments:
;       .X      the object to request (0-7)
;       .A      the desired action (run, stand, attack, jump, etc)
;       .Y      the desired facing (left or right)
;
RequestAction   subroutine
.desired_action = temp_w
.current_action = temp_w2
.cur_facing = temp_w3
        ; if new action is requested, or facing different direction, update action
        sta .desired_action
        lda obj_current_action,x
        sta .current_action
        cmp .desired_action
        bne .newact
        ; facing different?
        lda obj_info,x
        and #OBJ_INFO_BIT_FACING
        sta .cur_facing
        cpy .cur_facing
        bne .newact
        jmp .exit

.newact tya                     ; .A = facing
        ldy .desired_action     ; action = run?
        beq .0
        dey
        beq .1
        dey
        beq .2
        dey
        beq .3
        dey
        beq .4
        dey
        beq .5
        dey
        beq .6
        dey
        beq .7
        dey
        beq .8
        dey
        beq .9
        rts             ; invalid
.jmptable:
.0      jmp .run
.1      jmp .jump
.2      jmp .jump_kick
.3      jmp .jump_punch
.4      jmp .kick
.5      jmp .punch
.6      jmp .land
.7      jmp .stand
.8      jmp .die
.9      jmp .hit

        ; Action: run
.run
        tay                     ; .Y = desired facing
        lda .current_action
        cmp #ACT_STAND          ;   if not standing or running, can't run(go exit)
        beq .dorun
        cmp #ACT_LAND
        beq .dorun
        cmp #ACT_RUN
        bne .exit
.dorun:
        and #~OBJ_INFO_BIT_FACING
        sty .cur_facing
        ora .cur_facing
        sta obj_info,x
        lda #kRunVelocity       ; set velocity
        cpy #OBJ_INFO_FACING_RT ;  positive if facing right
        beq .rt
        lda #(-kRunVelocity)    ;  negative if facing left
.rt     sta obj_vel_x,x
        jmp .setAction

        ; Action: jump
.jump:
        lda .current_action
        ; can only jump if standing or running
        cmp #ACT_RUN
        beq .dojump
        cmp #ACT_STAND
        beq .dojump
        bne .exit               ; branch always
.dojump:
        lda #(-kJumpVelocity)               ; set jump velocity
        sta obj_vel_y,x
        jmp .setAction

.stand:
        ; Action: stand
        lda spr_xy_pos+1,x
        cmp #kSpriteGroundLevel
        bne .exit
        lda #0
        sta obj_vel_x,x
        jmp .setAction

        ; TODO: actions not yet implemented
.jump_kick:
.jump_punch:
.kick:
.punch:
.land:
        ; Action: land
        lda #0                  ;   reset y velocity
        sta obj_vel_y,y         ;
        jmp .setAction
.attack:
.die:
.hit:
        jmp .exit

.setAction:
; called if the action has been granted
        lda obj_info,x            ; newAction = true
        ora #OBJ_INFO_BIT_NEWACTION
        sta obj_info,x
        lda .desired_action
        tay                     ; y = theAction
        sta obj_current_action
        lda obj_action_array_lo,x
        sta .desired_action
        lda obj_action_array_hi,x
        sta .desired_action+1
        lda (.desired_action),y            ; set initial sprite data pointer based on action
        sta spr_data_ptrs,x

.exit   rts


PlayerUpdateVelocityAndState    subroutine
        ldy #0                  ; player sprite
        ; fallthrough intentional
; ******************* ObjectUpdateVelocityAndState *******************
;
; Purpose:      update object velocity and state
;
; Input:        .Y      the sprite to update(0-7)
ObjectUpdateVelocityAndState    subroutine
        ; x = y*2
        tya
        asl
        tax
        lda spr_xy_pos+1,x
        ; A is the sprite Y position
        cmp #kSpriteGroundLevel ; is sprite at ground level?
        beq .4                  ; yes, do nothing
        bpl .3                  ; above ground level?
        tya
        tax
        inc obj_vel_y,x         ;   yes, increase downward velocity
        clc
        bcc .4                  ;   branch always

.3      lda #kSpriteGroundLevel ; else below ground level, set to ground level
        sta spr_xy_pos+1,x
        lda obj_info,x
        and #OBJ_INFO_BIT_FACING
        tay
        lda #ACT_LAND
        jsr RequestAction
        rts
.4:
        ; update state based on previous state
        lda obj_info,x
        and #OBJ_INFO_BIT_FACING
        tay

        ; change from land -> stand
        lda obj_current_action,x
        cmp #ACT_LAND
        bne .5
        lda #ACT_STAND
        jsr RequestAction
.5:
        rts


PlayerSpriteUpdatePosition      subroutine
        ldx #0
        ; fallthrough intentional
; ******************* SpritesUpdatePosition *******************
;
; Purpose:      update sprite position from velocity
;
; Input:        .X      the sprite to update(0-7)
SpritesUpdatePosition   subroutine
.spr_x_offs = temp_w
        ldy spr_data_ptrs,x
        ; if facing left, need to use the next sprite pointer
        lda obj_info,x
        and #OBJ_INFO_BIT_FACING
        beq .1
        iny

        ; if there is a non-zero x offset associated with this sprite, use it
        ;  to update position, otherwise use the sprite velocity
.1      lda SpriteOffset,y
        bne .2
        lda obj_vel_x,x
.2      sta .spr_x_offs
        ; y = object #, x = x*2
        txa
        tay
        asl
        tax
        ; add sprite velocity to current X position
        lda spr_xy_pos,x
        clc
        adc .spr_x_offs
        cmp #kSpriteMinXPos
        bcc .3
        cmp #kSpriteMaxXPos
        bcs .3
        sta spr_xy_pos,x
.3:
        ; add sprite vel to current Y position
        lda spr_xy_pos+1,x
        sta .spr_x_offs
        lda obj_vel_y,y
        clc
        adc .spr_x_offs
        sta spr_xy_pos+1,x
        rts


; ******************* SpriteAnimationNextFrame *******************
;
; Purpose:      advance all sprite animations by one frame
;
; Input:        None
;
; TODO: currently only does sprite 0(player sprite). Needs to be fixed when
;       more sprites are added
SpriteAnimationNextFrame subroutine
        ldx #0                  ; player sprite
        lda spr_data_ptrs,x   ; .Y = sprite #
        tay
        lda SpriteSequence,y
        sta spr_data_ptrs,x
        rts


; ******************* DisableSprite *******************
;
; Purpose:              Disables a sprite
;
; Registers used:
;
; How to use:
;       Load .X with the sprite to disable (0-7)
;       Call this routine
;
DisableSprite   subroutine
        lda kResetBit,x
        and spr_enable
        sta spr_enable
        rts

DisableAllSprites       subroutine
        lda #0
        sta spr_enable
        rts

