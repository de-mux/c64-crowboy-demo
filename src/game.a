; "Crow Boy"
;(c) 2002 by Eric Odland
;
; File : game.a
;
; Contains : Main game driver/subroutines
;

; Timing info: NTSC 263 scanlines x 65 cycles x 60Hz = 1,0257 MHz
;              PAL 312 scanlines x 63 cycles x 50Hz = 0,9828 MHz

;Modes
_GAME_MODE_WORLD_UPDATE             EQU 0
; TODO: does this need to be a mode?
_GAME_MODE_NEW_GAME                 EQU 1
_GAME_MODE_SETUP_LEVEL              EQU 2
_GAME_MODE_FINISH_LEVEL             EQU 3
_GAME_MODE_LOSE_LIFE                EQU 4
_GAME_MODE_GAME_OVER                EQU 5

_GAME_MODE_EXIT_TO_MAIN_MENU        EQU 7
_GAME_MODE_FADE_IN                  EQU 8
_GAME_MODE_FADE_OUT                 EQU 9


; ******************* NewGame *******************
;
; Purpose:              Start new game
;
; Prerequisites:
;       Make sure IRQ has been set up.
;
QueueFadeOutToNewGame   subroutine
        lda #_GAME_MODE_NEW_GAME
        jsr SetMode

        ldx #<Int_ModeJump
        ldy #>Int_ModeJump
        lda #IRQ_MODE_JUMP_COMPARE
        jsr QueueNextInterrupt

        lda #FADE_MODE_OUT
        jsr SetInterruptFade

        rts

; ******************* SetMode *******************
;
; Purpose:              set current game mode
;
; Registers used:       .A
;
; Memory used:          mode
;
; How to use:
;       Load .A with desired mode and call this routine.
;
SetMode subroutine
        sta mode
        rts


; ******************* Int_ModeJump *******************
;
; Purpose:              Determine what mode the game is in
;                               and jump to appropriate subroutine.
;
; How to use:
;       Disable interrupts.
;       Set up IRQ interrupt to point to this routine with set_interrupt macro.
;       Enable interrupts.
;
Int_ModeJump        subroutine
        ;inc $d020     ; indicator of where IRQ starts

        ; toggle between 0 and 1
        ;  0 means do game update
        ;  1 means setup screen update at scanline IRQ_SCREEN_UPDATE_COMPARE and RTI
        ;lda frame_toggle
        ;eor #1
        ;sta frame_toggle
        ;bne .1

        ;jsr RequestWorldScreenUpdate
        ;jmp ModeExit

        ; setup next interrupt for game update
.1:
        set_rts_vector ModeExit

        ; mode jump table
        lda mode
        beq .DoWorldUpdate
        tax
        dex
        beq .DoNewGame
        dex
        beq .DoSetupLevel
        dex
        beq .DoFinishLevel
        dex
        beq .DoLoseLife
        dex
        beq .DoGameOver
        dex
        beq .DoMainMenu
        dex
        beq .DoExitToMainMenu
        rts                     ; jumps to ModeExit if no mode...
ModeExit:
        jsr MusicSong1IRQ
        jmp IRQExit
; Jump Table
.DoWorldUpdate    jmp DoWorldUpdate
.DoNewGame        jmp DoNewGame
.DoSetupLevel     jmp DoSetupLevel
.DoFinishLevel    jmp DoFinishLevel
.DoLoseLife       jmp DoLoseLife
.DoGameOver       jmp DoGameOver
.DoMainMenu       jmp DoMainMenu
.DoExitToMainMenu jmp DoExitToMainMenu


DoNewGame       subroutine
        jsr InitGameGraphics
        jsr MusicSong1Init

        set_level 1             ; start at Level 1

        set_mode _GAME_MODE_SETUP_LEVEL
        rts


; Mode Name:            DoSetupLevel
;
; Purpose:              Read a level and decode it into the current
;                               level space
;
; Memory Used:          word temp_w, word temp_w2, byte temp_w3, word NextLevel
;
; Data Used:            BlockSet1, BlockSet2, CurLevel, Level Data
;
; Before use:
;       Store ptr to level data into NextLevel using the macro
;               set_level [level#] or by other means
;       set_mode DoSetupLevel
;
DoSetupLevel    subroutine
        ldy #0                  ; read level header
        lda (NextLevel),y       ; push chrset to use on stack
        pha
        iny
        lda (NextLevel),y
        pha                     ; push ptr to next level on stack
        iny
        lda (NextLevel),y
        pha
        iny
        lda (NextLevel),y       ; push level flags on stack
        pha
        sta level_header_flags  ; store level flags in ZeroPage

        ; set ptr to beginning of level block data
        lda #LEVEL_HEADER_LENGTH
        clc
        adc NextLevel
        bcc .1
        inc NextLevel+1
.1      sta NextLevel

        pla                     ; get level flags from stack
        lsr
        bcs .color2
        ; decode level flags
        ldx BGColors1+0
        stx BG0_COLOR
        ldx BGColors1+1         ; what color set? Set BG colors 0-2
        ldy BGColors1+2
        bpl .nxt                ; branch always
.color2 ldx BGColors2+0
        stx BG0_COLOR
        ldx BGColors2+1
        ldy BGColors2+2
.nxt    stx BG1_COLOR
        sty BG2_COLOR

        ldx #>BlockSet1
        lsr                     ; what block set? (0 or 1)
        bcc .setup              ;  branch if blockset it 0
        ldx #>BlockSet2
        ; get below routine ready for decode(caution! self-modifying code!!)
.setup  stx .upLft+2            ; set these to point to block data
        inx
        stx .loLft+2
        inx
        stx .upRt+2
        inx
        stx .loRt+2
        lda NextLevel           ; more self-modifying stuff
        ldy NextLevel+1
        sta .nxtLev+1
        sty .nxtLev+2

        pla                     ; pull ptr to next level from stack
        sta NextLevel+1         ;  store in memory
        pla
        sta NextLevel

        ; set temp_w and temp_w2 to point to current level memory
        ldx #<CurLevel          ; this is where the level will be decoded
        ldy #>CurLevel
        stx temp_w              ; temp_w = even rows
        sty temp_w+1
        iny                     ; temp_w2 = odd rows
        stx temp_w2
        sty temp_w2+1

        ; level decoder, block by block
        ;   copy decoded blocks into current level memory
        ldy #0
.decode ldx #0

.st     stx temp_w3             ; temporarily store .X
.nxtLev lda $FFFF,x             ; get byte from row of level data
        tax

.upLft  lda BlockData,x         ;  .x = block #, .y = decoded level column
        sta (temp_w),y
.loLft  lda BlockData+$100,x
        sta (temp_w2),y
        iny
.upRt   lda BlockData+$200,x
        sta (temp_w),y
.loRt   lda BlockData+$300,x
        sta (temp_w2),y
;
        ldx temp_w3
        inx                     ; set x to point to next byte in level data
        iny                     ; set y to point to next block decode to the right(in current level)
;
        bne .st                 ; not at end of row yet
        lda #LEVEL_PACKED_WIDTH ; get ready for next row
        clc
        adc .nxtLev+1
        bcc .2
        inc .nxtLev+2
.2      sta .nxtLev+1
        inc temp_w+1            ; shift each temp_w down 2 rows
        inc temp_w+1
        inc temp_w2+1
        inc temp_w2+1
        lda temp_w+1            ;  is temp_w past bottom of level memory?
        cmp #>(CurLevelEnd+1)
        bne .decode             ;       no, do more rows

        lda #0                  ; start at left-hand side of level
        sta rough_scroll
        lda #0
        sta fine_scroll

        ; set ChrSet
        pla                     ; get ChrSet to use for this level
        sta temp_w
        lda VICMEM
        and #VICMEM_VIDEO_ADDR_SELECT_MASK
        ora temp_w
        sta VICMEM

        ; disable all sprites
        jsr DisableAllSprites

        ; create the player object
        jsr SetupPlayer

        set_mode _GAME_MODE_WORLD_UPDATE    ;start game running
        rts


DoWorldUpdate   subroutine

        ; update player/sprites buffers
        jsr PlayerSpriteUpdatePosition
        jsr PlayerUpdateVelocityAndState
        jsr SpriteAnimationNextFrame

        ; read user input and request action
        jsr ReadJoy
        jsr PlayerHandleJoystick

        ; scroll screen based on player(sprite 0)'s X position
        lda #0
        jsr ScreenScroll

        ; TODO: this only needs to happen if rough scroll has changed
        jsr DrawLevelToOffscreen

        ;lda #1                 ; tell screenUpdate to update screen
        ;sta ScreenNeedsUpdating
        jsr RequestWorldScreenUpdate

        rts


; ******************* PlayerHandleJoystick *******************
;
; Purpose:              request action(s) based on state of joystick
;
; Input:        .X              X direction(1, 0 or -1)
;               .Y              Y direction(1, 0 or -1)
;               carry bit       set=fire pressed, clear=fire not pressed
; How to use:
;       Call ReadJoy and then call this routine.
;
PlayerHandleJoystick    subroutine
.fire = temp_b
.y = temp_b2
        ; store fire button value and y value for later
        lda #0
        bcs .nf                 ;
        lda #1                  ;
.nf     sta .fire               ; 0 or 1
        sty .y
        cpx #0
        bpl .1
        lda #ACT_RUN            ; if X = -1, run left
        ldy #OBJ_INFO_FACING_LFT
        jmp .req_act
.1      beq .2
        lda #ACT_RUN            ; if X = 1, run right
        ldy #OBJ_INFO_FACING_RT
        jmp .req_act
.2:     lda #ACT_STAND          ; otherwise, attempt to stand
.req_act:
        ldx #0
        jsr RequestAction

        ldy .y                  ; if Y = -1 (jump)
        bpl .4
        lda jump_latch          ;  must release jump button before jumping again
        beq .exit
        ldx #0                  ; jump
        stx jump_latch          ; to prevent user from holding down jump
        lda #ACT_JUMP
        jsr RequestAction
        jmp .5
.4:     ; jump not pressed, reset jump latch
        lda #1
        sta jump_latch
.5:
        lda .fire               ; if (fire) then attack
        beq .6
        ldx #0
        lda #ACT_KICK
        jsr RequestAction

.6:
.exit:
        rts



DoFinishLevel   subroutine
        rts


DoLoseLife      subroutine
        rts


DoGameOver      subroutine
        rts


DoMainMenu      subroutine
        rts

