; "Crow Boy"
;(c) 2002 by Eric Odland
;
; File : boot.a
;
; Contains : Skeleton of the program, setup.
;
; Written for dasm, the 6502 cross-compiler(http://sourceforge.net/projects/dasm-dillon/)
; Assemble .prg file with: make

; DEBUG constants -- uncomment a given debug feature to enable it
;DEBUG_DISABLE_LOGO = 1  ; uncomment to disable logo
;DEBUG_IRQ = 0

SPRITE_DIR = "../sprites/"

; define the VIC-II 16K bank to use
VIC_BANK = 1   ; $4000-$7FFF
VIC_BANK_START_LOC = VIC_BANK * $4000
VIC_BANK_SELECT_BITS = (3-VIC_BANK)

; define banks for screen 1 & 2 character data maps(relative to VIC_BANK_START_LOC)
SCREEN_1_BANK_START_LOC = $0C00
SCREEN_1_BANK_SELECT_BITS = SCREEN_1_BANK_START_LOC / $40
SCREEN_2_BANK_START_LOC = $2C00
SCREEN_2_BANK_SELECT_BITS = SCREEN_2_BANK_START_LOC / $40

; define banks for character memory (chrsets 1 & 2, relative to VIC_BANK_START_LOC)
CHARSET_1_START_LOC = $3000
CHARSET_1_BANK_SELECT_BITS = CHARSET_1_START_LOC / $400
CHARSET_2_START_LOC = $3800
CHARSET_2_BANK_SELECT_BITS = CHARSET_2_START_LOC / $400


        processor 6502

        include "macros.a"
        include "system.a"
        include "constants.a"

; ************ ZERO PAGE VARIABLES ***********
        SEG.U ZeroPage
        org $02
ZeroPage:

; Timing
frame_toggle    DC.B 0  ; toggles between 0/1 every IRQ, useful for when IRQ routine
                        ; takes longer than screen refresh cycle

; Interrupts
; used to store the address of the next interrupt routine to enable after
;  the current interrupt has completed its task
v_next_interrupt        DC.W 0
next_irq_compare        DC.B 0  ; Next interrupt scanline number

; Int_MainMenu
menu_mode       DC.B 0  ; what mode the menu is in
menu_next_mode  DC.B 0  ; store the value of the mode to set after fadeout

; Int_WorldScreenUpdate
rough_scroll    DC.B 0  ; current level rough scroll pos(upper-left lo-byte)
fine_scroll     DC.B 0  ; smooth X scroll
; buffers for sprite/object information. These are updated by the game engine
;  and then copied to the actual VIC registers each frame
spr_data_ptrs:          ;sprite data pointers for current right-facing sprite
        DS.B 8          ;  add 1 to get left-facing version
spr_xy_pos      DS.W 8  ; pairs of x/y coordinate bytes for sprites
spr_x_pos_msb   DS.B 1  ; 9th bit(MSB) for sprite x position
spr_enable      DS.B 1  ; bits representing on/off for each of the 8 sprites


; Screen
screen_update_flag DC.B 0 ; 1 means screen needs updating
cursor_color    DC.B 0
cursor_pos      DC.W 0  ; position of cursor in screen memory
color_pos       DC.W 0  ; corresponding color location for cursor
fade_mode       DC.B 0  ; indicates if the screen is not fading, fading in, fading out
fade_table_index      DC.B 0  ; current fade index for screen(relative to beginning of fade table)
screen_page     DC.B 0  ; what page we're on (0 or 1)
onscreen_char_msb DC.B 0 ; the actual MSB of the current screen char memory
offscreen_char_msb DC.B 0 ; the actual MSB of the offscreen screen char memory

; General
temp_w          DC.W 0  ; temporary area for storing word addresses
temp_w2         DC.W 0
temp_w3         DC.W 0
temp_b          DC.B 0
temp_b2         DC.B 0
temp_b3         DC.B 0

; Game
level_header_flags DC.B 0 ; see Levels below for meaning of bits
reset_flag      DC.B 0  ; whether or not game has been reset
mode            DC.B 0  ; mode of game (see game.a)
NextLevel       DC.W 0  ; ptr to the next level
jump_latch      DC.B 0  ; player must release jump button before allowed to jump again

; Music
MusicZP         DC.B 0,0,0,0,0,0        ; used by music routine ($FA-$FF)

        ; make sure zeropage defs don't overflow into page 1
        IF . > $100
        ERR
        ENDIF

        SEG.U offscreencolor
; ************* Offscreen Color Area ***************
        ; this must be multiple of $100
        ;  for DrawLevelToOffscreen to work
        org $0400,0
offscreen_color_mem = .

        ; store sprite colors, bg colors after color memory area
        ;org OFFSCREEN_COLOR_MEM + $03E8,0
        org . + $03E8,0
offscreen_vic_ii_color_registers:
offscreen_color_border  dc.b 0
offscreen_color_bg0     dc.b 0
offscreen_color_bg1     dc.b 0
offscreen_color_bg2     dc.b 0
offscreen_color_bg3     dc.b 0
offscreen_color_spr_mc0 dc.b 0
offscreen_color_spr_mc1 dc.b 0
offscreen_color_sprites dc.b 0,0,0,0,0,0,0,0

        IF . >= offscreen_color_mem + $400
        ERR
        ENDIF

; ************** BASIC HEADER ***************
        SEG header
        org $0801
BASIC_START:
        DC.W BASEND,2002
        DC $9E
        DC "2061"
        DC 0
BASEND  DC.W 0


; ****************    CODE   *****************
        SEG code
        org 2061
Start:  sei

        ldx #$FF                ; reset stack
        txs
        cld                     ; clear decimal mode

        ; BASIC ROM($A000-$BFFF)/KERNAL ROM($E000-$FFFF) out
        lda #%00110101
        sta CPU_PROCESSOR_PORT

        ; reset zeropage variables
        ldx #($100-ZeroPage)
        lda #0
.1      sta ZeroPage-1,x
        dex
        bne .1

        jsr InitScreen

        IFNCONST DEBUG_DISABLE_LOGO
        jsr C64LOGO             ; show C64 Logo
        ENDIF
        jsr TextInit            ; init text

        ; setup IRQ interrupt. The rest of code execution happens
        ;  through interrupts.
        jsr InitIRQ
        ; point interrupt to main menu routine and enable interrupts
        jsr DoExitToMainMenu

        ; loop infinitely until program has been reset
.loop   lda reset_flag
        beq .loop
        jmp Start

        ECHO "Writing Code Segment 1:     ", Start, "-", .-1

        include "logo.a"

        ECHO "Writing Logo Code:                -", .-1, " (", ($1000 - .), "bytes remaining. )"

        DC "OH, WHAT A MEAL!",0
copyright_string:
        DC copyright_char
        DC "2002 STONE MONKEY, INC.",0


;**************** DOWNTOWN DATA ****************
;
        SEG data

; ************* BG/Char Colors 1 & 2 ***************
;
        org $1000,0
        ECHO "Including colortables:"
CHAR_COLOR_TABLES:
BGColors1:
Colors1 = .-$3D    ;$0FC3

        incbin "chrset1.colortable"

        ECHO "    Colortable 1:          ", BGColors1, "-",.-1

        ;$10C3
BGColors2:
Colors2 = .-$3D    ;$1086
        ;incbin "chrset2.colortable"


; ************* Block data ***************
;
        org $1200,0
BlockData:
BlockSet1:
        incbin "downtown1.blocks"

        ECHO "Including Block Data 1:    ", BlockSet1, "-",.-1

BlockSet2:
        ;incbin "downtown2.blocks"
        ;ECHO "Including Block Data 2:           -",.-1


; ************* 16 Compressed Levels ***************
; $1A00 - $397F
        org $1A00,0
; Level header flag:
;       Bit 0 - what char set to use
;       Bit 1 - what block set to use
Levels:
Level1:
;   Header
        DC.B CHARSET_1_BANK_SELECT_BITS                 ; chrset to use(bank 12 or 14)
        DC.W Level1             ; ptr to next level
        DC.B %00000000          ; level flags (see above)
LEVEL_HEADER_LENGTH SET . - Level1
;   Data
        incbin "downtown1.level"
;Level 2
;Level 3
;Level 4
;Level 5
;Level 6
;Level 7

        ECHO "Including", [(.-Levels)/1152]d, "Levels:        ",Levels,"-",.-1
; ************* Screen 1 & 2 ***************
;
Screen1 = VIC_BANK_START_LOC + SCREEN_1_BANK_START_LOC   ;$4C00, was $0400
Screen2 = VIC_BANK_START_LOC + SCREEN_2_BANK_START_LOC   ;$6C00, was $2C00
SCREEN_1_SPR_PTRS = Screen1 + SPR_PTR_OFFSET
SCREEN_2_SPR_PTRS = Screen2 + SPR_PTR_OFFSET


        org $3980,0
        include "color_fade_table.a"
        ; this must not cross page boundaries
        IF . > $3A00
        ERR
        ENDIF

; ************* Current Level Space ***************
;
        org $3A00,0
CurLevel:

        org $4C00,0
CurLevelEnd = .-1
        ECHO "Unpacked level area:       ", CurLevel, "-", CurLevelEnd

        ECHO "Screen 1:                  ", Screen1, "-", Screen1 + $3ff
        ECHO "Screen 2:                  ", Screen2, "-", Screen2 + $3ff


;**************** Sprites ****************
;
        org $5000,0     ; area for C64 logo sprites (19 total)
SPRITE_DATA:
C64_LOGO_SPRITE_DATA:

        org $54C0,0     ; in-game sprites
GAME_SPRITE_DATA:
        incbin "gamesprites.bin"

        ECHO "Including Sprite Data:     ", SPRITE_DATA, "-", .-1


; ************* Charsets 1 & 2 ***************
;
        ECHO "Including Character Sets:"
        org $7000,0
Charset1:               ; ($7000-$7800)
        incbin "chrset1.chr"

        ECHO "    Including chrset1.chr: ", Charset1, "-",.-1

        org $7800,0
Charset2:               ; ($7800-$7FFF)

        org $7A00,0     ; C64 logo chars ($7A00-$7B1F chars 64-99)
        org $7B20,0     ; Ping logo ($7B20-$7C4F chars 100-138)
PING_LOGO_CHAR_DATA:
        incbin "pinglogo.chr"
        ECHO "    Including pinglogo.chr:", PING_LOGO_CHAR_DATA, "-", .-1

        ;org $7C50,0     ;

        ;incbin "chrset2.chr"

        ;ECHO "    Including chrset2.chr:        -",.-1


;**************** DOWNTOWN CODE ****************
        SEG code
        org $A6D0,0

CODE_SEGMENT_2:
        include "irq.a"
        include "screen.a"
        include "text.a"
        include "graphics.a"
        include "menu.a"
        include "util.a"
        include "game.a"
        include "objects.a"
        ; information for sprite sequences, x offsets
        include "sprite_info.a"

        ECHO "Writing Code Segment 2:    ",CODE_SEGMENT_2,"-",.-1," (",($D000 - .)," of ",$D000-CODE_SEGMENT_2,"bytes remaining. )"
        ECHO ""
        ECHO ""

; ************* Music ***************
; $E000-$FFFF
        org $E000
MusicInit:
MusicPlay = .+3
